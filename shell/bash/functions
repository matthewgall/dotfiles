function myip {
    curl -s ipinfo.io | jq -r '. | "\(.ip) (\(.hostname))"'
}
function ptr {
    ip=${1}
    dig +short -x $ip | sed 's/.$//g'
}

# route to backup connection
function routeto-backup {
    iface=${1:-wlp2s0}
    sudo route add default gw 192.168.1.25 $iface
}
function routeto-primary {
    iface=${1:-wlp2s0}
    sudo route del default gw 192.168.1.25 $iface
}

# rsync.net
function rsnet {
    ssh ch-s011.rsync.net "$@"
}

# findabuse.email
function abusedb {
    ip=${1:-blank}
    if [ $ip = "blank" ]; then
        echo -e "You must provide an IP address to lookup"
        return -1
    fi
    curl -s https://api.findabuse.email/api/v1/$1 | jq -r ".[].contacts.abuse[]"
}

# zonefiles.io
function zonefiles-get {
   zid=${1:-1}
   dtype=${2:-updatedata}
   curl -s "https://zonefiles.io/a/$ZONEFILES_API/$dtype/$zid"
}
function zonefiles {
   zid=${1:-1}
   dtype=${2:-updatedata}
   term=${3:-token}
   zonefiles-get $zid $dtype | grep "$term"
}
function zonefiles-csv {
   zid=${1:-1}
   dtype=${2:-updatedata}
   file=${3:-updatedata.csv}
   echo "zone_name,nameservers,ip,geo_ip,geo_html,server,hostname,email,rank_alexa,phone,rank_majestic,date_discovery" | tee $file
   zonefiles-get $zid $dtype >> $file
}

# urlscan.io
function urlscan {
    url=${1:-blank}
    tag=${2:-osint}
    vis=${3:-public}

    if [ $url = "blank" ]; then
        echo -e "You must provide a URL to submit"
        return -1
    fi

    # Perform lookup
    data=$(curl -s -X POST "https://urlscan.io/api/v1/scan/" \
      -H "Content-Type: application/json" \
      -H "API-Key: $URLSCAN_API" \
      -d "{\"url\": \"$url\", \"visibility\": \"$vis\", \"tags\": [\"$tag\"]}")
    status=$(echo $data | jq -r .status)

    # Check for an error code
    if [ $status = "400" ]; then
        echo $data | jq -r .description
        return -1
    fi
  
    # Otherwise, return
    echo $data | jq .
}

# wireguard utilities
function wg-util {
    action=${1:-list}

    if [ $action = "list" ]; then
        sudo ls /etc/wireguard/ | sed 's/\.conf//g'
    elif [ $action = "up" ]; then
        sudo wg-quick up "$@"
    elif [ $action = "down" ]; then
        sudo wg-quick down "$@"
    fi
}

# tailscale
function ts-ip {
    host=${1:-blank}
    
    if [ $host = "blank" ]; then
        echo -e "You must provide a hostname to lookup"
        return -1
    fi

    tailscale status | grep "$host" | cut -d ' ' -f 1
}

# vpn generators
function mullvadgen {
    location=${1:-list}
    content=$(curl -s https://api.mullvad.net/www/relays/all/)
    
    # Are we asking for a list of locations
    if [ $location = "list" ]; then
	echo -e $content | jq -r '.[] | select(.type=="wireguard") | .hostname'
        return -1
    fi

    # We're asking about something specific, so go check
    data=$(echo -e $content | jq -r ".[] | select(.hostname==\"$1-wireguard\")")
    
    # Did we get anything back?
    if [ -z "$data" ]; then
        echo "Unable to connect to Mullvad, or you selected a location that does not exist"
        return -1
    fi    

    # We did, so now we can interrogate the content for what we need
    dns=$(echo "193.138.218.74")
    address=$(echo "10.65.213.43/32,fc00:bbbb:bbbb:bb01::2:d52a/128")
    publickey=$(echo $data | jq -r .pubkey)
    privatekey=$(cat $HOME/.wireguard/privatekey)
    endpoint=$(echo $data | jq -r .ipv4_addr_in)

    # And construct a connection
    echo -e "[Interface]\nPrivateKey = $privatekey\nDNS = $dns\nAddress = $address\n\n[Peer]\nPublicKey = $publickey\nEndpoint = $endpoint:51820\nAllowedIPs = 0.0.0.0/0,::/0"

}

function aziregen {
    location=${1:-uk1}
    content=$(curl -s -d username=$AZIREVPN_USER --data-urlencode password=$AZIREVPN_PASS --data-urlencode pubkey=$(cat $HOME/.wireguard/publickey) "https://api.azirevpn.com/v1/wireguard/connect/$location")
    status=$(echo $content | jq -r .status)

    # Did we get a successful response?
    if [ $status = "error" ]; then
        echo "Unable to connect to AzireVPN, or you selected a location that does not exist"
        return -1
    fi

    # We did, so now we can interrogate the content for what we need
    dns=$(echo $content | jq -r .data.DNS | sed -r 's/\s+//g')
    address=$(echo $content | jq -r .data.Address | sed -r 's/\s+//g')
    publickey=$(echo $content | jq -r .data.PublicKey)
    privatekey=$(cat $HOME/.wireguard/privatekey)
    endpoint=$(echo $content | jq -r .data.Endpoint)

    # And construct a connection
    echo -e "[Interface]\nPrivateKey = $privatekey\nDNS = $dns\nAddress = $address\n\n[Peer]\nPublicKey = $publickey\nEndpoint = $endpoint\nAllowedIPs = 0.0.0.0/0,::/0"
}
